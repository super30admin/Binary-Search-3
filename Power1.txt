# Time - O(logn)
# Space - O(logn)
# Ran on LeetCode

# Half the power each time - If n is even, x^(n/2) * x^(n/2); If n is odd, x * x^(n/2) * x^(n/2)

class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n < 0:
            return 1/self.helper(x, -n)
        else:
            return self.helper(x, n)
        
    def helper(self, x, n):
        if x == 0.0:
            return 0
        if n == 0:
            return 1
        ans = self.helper(x, n//2)
        if n%2 == 0:
            return ans*ans
        return x*ans*ans