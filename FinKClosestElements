/*
Approach: 

High = nums.length - k //as there will always be k element from num.length

part of algo
L_D: Math.abs(x - arr[mid])
R_D: Math.abs(x - arr[mid + k])

L_D > R_D: Find how far the starting point is from mid towards left and right using (Left distance) & R_D (Right Distance)

create an output array from the startig point (low pointer)
Time complexity: O(log n)
Space complexity: O(n)

*/

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int low = 0;
        int high = arr.length - k;
        
        //find starting point of the closest k elements
        while(low < high){
            int mid = low + (high - low)/2;
            
            int LeftDistance = Math.abs(x - arr[mid]);
            int rightDistance = Math.abs(x - arr[mid + k]);

            if(LeftDistance > rightDistance){
                low = mid + 1; 
            } else {
                if(arr[mid] == arr[mid + k]) {
                    low = mid + 1;
                } else{
                    high = mid;
                }
            }
        }
        
        //create output list of k closest elemnts from starting point
        List<Integer> output = new ArrayList<>();
        for(int i = low; i < low + k; i++){
            output.add(arr[i]);
        }
        return output;
    }
}
